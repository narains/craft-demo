{"version":3,"sources":["Constants.js","reducers/errorReducer.js","reducers/fieldReducer.js","reducers/submitReducer.js","context/fieldContext.js","elements/button/style.js","elements/button/index.js","elements/errorList/style.js","elements/errorList/index.js","elements/input/style.js","elements/input/index.js","MessageBundle.js","helper/validation.js","components/choices/choiceAdd/style.js","components/choices/choiceAdd/index.js","elements/messageBox/style.js","elements/messageBox/index.js","components/choices/choiceGrid/index.js","components/choices/index.js","elements/checkbox/style.js","elements/checkbox/index.js","elements/select/style.js","elements/select/index.js","elements/label/style.js","elements/label/index.js","components/field/fieldBody/style.js","components/field/fieldBody/index.js","services/mockService.js","components/field/fieldFooter/style.js","components/field/fieldFooter/index.js","elements/title/style.js","elements/title/index.js","components/field/style.js","components/field/index.js","App.js","serviceWorker.js","index.js"],"names":["TYPE","label","value","ORDER","OPERATIONS","ADD_CHOICE","CANCEL_CHOICE","CLEAR_ERROR","DELETE_CHOICE","REORDER_CHOICE_LIST","HANDLE_CHANGE_FOR_ADD_CHOICE","HANDLE_CHANGE_FOR_EDIT_CHOICE","HANDLE_INPUT_CHANGE","HANDLE_BLUR","HANDLE_CHECK_BOX_CHANGE","SET_ERROR_ON_SUBMIT","SUBMIT_STARTED","SUBMIT_COMPLETE","SUBMIT_ERROR","UPDATE_CHOICE","INITIAL_FIELD_STATE","type","required","default","choices","displayOrder","INITIAL_ERROR_STATE","addChoice","editChoices","INITIAL_SUBMIT_STAGE","submitted","loading","errorMessage","response","state","action","payload","errors","CLEAR","name","id","uuid","choice","isEditing","map","modifiedChoice","filter","updatedChoices","DispatchContext","createContext","DispatchProvider","children","useReducer","errorReducer","error","dispatchError","fieldReducer","field","dispatchField","submitReducer","submit","dispatchSubmit","Provider","dispatch","forEach","fn","ButtonWrapper","styled","button","props","theme","size","color","Button","text","onClick","ErrorListWrapper","ul","ErrorList","length","key","InputWrapper","input","Input","handleBlur","handleChange","inputType","readOnly","onChange","onBlur","REACHED_MAX_LIMIT_FOR_CHOICES","maxCount","args","list","maxLimit","some","item","ChoiceAddWrapper","div","ChoiceAddInputWrapper","ChoiceAdd","useState","setChoice","useContext","useEffect","validateInput","ValidationUtil","hasReachedMaxLimit","push","ifExists","CHOICE_ALREADY_EXISTS","event","preventDefault","target","MessageBoxWrapper","span","MessageBox","ChoiceGrid","currentChoice","setCurrentChoice","handleInputChange","index","reorderChoiceList","dispatchUpdate","cancelEditing","editChoice","updateChoice","reorderId","draggedClassName","lock","onReorder","previousIndex","nextIndex","reorder","get","find","row","Choices","CheckboxWrapper","Checkbox","checked","SelectWrapper","select","Select","options","opt","LabelWrapper","Label","FieldBodyWrapper","FormGroupWrapper","FieldBody","FieldService","getField","displayAlpha","saveField","url","fieldJson","fetch","method","body","JSON","stringify","headers","FieldFooterButtonWrapper","FieldFooterMessageWrapper","FieldFooterWrapper","FieldFooter","handleFormSubmit","a","validateInputFields","console","log","then","resp","json","responseJson","defaultValue","isFieldEmpty","TitleWrapper","primary","Title","FieldWrapper","Field","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2e440d7d.chunk.js","sourcesContent":["export const TYPE = [\n\t{ label: 'Multi-Select', value: 'multiSelect' },\n\t{ label: 'Single-Select', value: 'singleSelect' }\n];\n\nexport const ORDER = [\n\t{ label: 'Display choices in Alphabetical Order', value: 'alphabetical' },\n\t{ label: 'Display choices in Top Down Order', value: 'topDown' },\n\t{ label: 'Display choices in Bottom Up Order', value: 'bottomUp' }\n];\n\nexport const MOCK_URL = 'http://www.mocky.io/v2/566061f21200008e3aabd919';\n\nexport const MAX_CHOICES = 3;\n\nexport const OPERATIONS = {\n\tADD_CHOICE: 'add_choice',\n\tCANCEL_CHOICE: 'cancel_choice',\n\tCLEAR_ERROR: 'clear_error',\n\tDELETE_CHOICE: 'delete_choice',\n\tREORDER_CHOICE_LIST: 'reorder_choice',\n\tHANDLE_CHANGE_FOR_ADD_CHOICE: 'handle_change_for_add_choice',\n\tHANDLE_CHANGE_FOR_EDIT_CHOICE: 'edit_choice',\n\tHANDLE_INPUT_CHANGE: 'handle_input_change',\n\tHANDLE_BLUR: 'handle_blur',\n\tHANDLE_CHECK_BOX_CHANGE: 'handle_checkbox_change',\n\tSET_ERROR_ON_SUBMIT: 'set_error_on_submit',\n\tSUBMIT_STARTED: 'activity_save',\n\tSUBMIT_COMPLETE: 'customer_create',\n\tSUBMIT_ERROR: 'submit_error',\n\tUPDATE_CHOICE: 'update_choice'\n};\n\n// Setting initial state for the Global reducer\nexport const INITIAL_FIELD_STATE = {\n\tlabel: '',\n\ttype: 'multiSelect',\n\trequired: false,\n\tdefault: '',\n\tchoices: [],\n\tdisplayOrder: 'alphabetical'\n};\n\nexport const INITIAL_ERROR_STATE = {\n\tlabel: [],\n\tdefault: [],\n\taddChoice: [],\n\teditChoices: []\n};\n\nexport const INITIAL_SUBMIT_STAGE = {\n\tsubmitted: false,\n\tloading: false,\n\terrorMessage: '',\n\tresponse: ''\n};\n","import { INITIAL_ERROR_STATE, OPERATIONS } from '../Constants';\n\nexport default (state, action) => {\n\tswitch (action.type) {\n    // case OPERATIONS.ADD_CHOICE:\n\t// \treturn {\n\t// \t\t...state,\n\t// \t\t\taddChoices: [\n\t// \t\t\t\t...state.field.choices,\n\t// \t\t\t\t{\n\t// \t\t\t\t\tid: uuid(),\n\t// \t\t\t\t\tname: action.payload.choice,\n\t// \t\t\t\t\tisEditing: false\n\t// \t\t\t\t}\n\t// \t\t\t]\n\t// \t\t// error: {\n\t// \t\t// \t...state.error,\n\t// \t\t// \taddChoice: []\n\t// \t\t// }\n\t// \t};\n\tcase OPERATIONS.SET_ERROR_ON_SUBMIT:\n\treturn {\n\t\t...state,\t\t\n\t\t...action.payload.errors\t\n\t};\n\tcase OPERATIONS.HANDLE_CHANGE_FOR_ADD_CHOICE:\n\treturn {\n\t\t...state,\t\t\n\t\t\taddChoice: action.payload.errors\t\n\t};\n\t// case OPERATIONS.HANDLE_CHANGE_FOR_EDIT_CHOICE:\n\t// \t\treturn {\n\t// \t\t\t...state,\n\t// \t\t\t\teditChoices: [\n\t// \t\t\t\t\t...state.editChoices,\n\t// \t\t\t\t\t{\n\t// \t\t\t\t\t\tid: action.payload.choice.id,\n\t// \t\t\t\t\t\terror: [\n\t// \t\t\t\t\t\t\tValidationUtil.checkIfUnique(\n\t// \t\t\t\t\t\t\t\tstate.field.choices,\n\t// \t\t\t\t\t\t\t\taction.payload.choice\n\t// \t\t\t\t\t\t\t)\n\t// \t\t\t\t\t\t]\n\t// \t\t\t\t\t}\n\t// \t\t\t\t]\n\t// \t\t};\n\t// case OPERATIONS.UPDATE_CHOICE:\n\t// \t\treturn {\n\t// \t\t\t...state,\n\t// \t\t\tfield: {\n\t// \t\t\t\t...state.field,\n\t// \t\t\t\tchoices: state.field.choices.map(choice => {\n\t// \t\t\t\t\tconst modifiedChoice = action.payload.choice;\n\n\t// \t\t\t\t\treturn choice.id === modifiedChoice.id ? modifiedChoice : choice;\n\t// \t\t\t\t}\n\n\t// \t\t\t\t)\n\t// \t\t\t},\n\t// \t\t\terror: {\n\t// \t\t\t\t...state.error,\n\t// \t\t\t\teditChoice: []\n\t// \t\t\t}\n\t// \t\t};\n\tcase OPERATIONS.CLEAR:\n\t\treturn {\n\t\t\t...state,\n\t\t\t...INITIAL_ERROR_STATE\n\t\t};\n\tcase OPERATIONS.CLEAR_ERROR:\n\t\treturn {\n\t\t\t...state,\n\t\t\t...INITIAL_ERROR_STATE\n\t\t};\n    default:\n\t\treturn { ...state };\n\t}\n};","import { INITIAL_FIELD_STATE, OPERATIONS } from '../Constants';\nimport uuid from 'uuid/v4';\n\nexport default (state, action) => {\n    switch (action.type) {\n\t// Handling events\n\tcase OPERATIONS.HANDLE_INPUT_CHANGE:\n\t\treturn {\n\t\t\t...state,\n\t\t\t[action.payload.name]: action.payload.value\n\t\t};\n\tcase OPERATIONS.HANDLE_CHECK_BOX_CHANGE:\n\t\treturn {\n\t\t\t...state,\n\t\t\t\t[action.payload.name]: !state[action.payload.name]\n\t\t};\n\t\t// Handling CRUD operations for Choices\n\tcase OPERATIONS.ADD_CHOICE:\n\t\treturn {\n\t\t\t...state,\n\t\t\t\tchoices: [\n\t\t\t\t\t...state.choices,\n\t\t\t\t\t{\n\t\t\t\t\t\tid: uuid(),\n\t\t\t\t\t\tname: action.payload.choice,\n\t\t\t\t\t\tisEditing: false\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t// error: {\n\t\t\t// \t...state.error,\n\t\t\t// \taddChoice: []\n\t\t\t// }\n\t\t};\n\tcase OPERATIONS.UPDATE_CHOICE:\n\tcase OPERATIONS.HANDLE_CHANGE_FOR_EDIT_CHOICE:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t\tchoices: state.choices.map(choice => {\n\t\t\t\t\t\tconst modifiedChoice = action.payload.choice;\n\n\t\t\t\t\t\treturn choice.id === modifiedChoice.id ? modifiedChoice : choice;\n\t\t\t\t\t\t})\n\t\t\t};\t\n\tcase OPERATIONS.DELETE_CHOICE:\n\t\treturn {\n\t\t\t...state,\n\t\t\t\tchoices: state.choices.filter(\n\t\t\t\t\tchoice => choice.id !== action.payload.id\n\t\t\t\t)\n\t\t};\n\n\t\t// case OPERATIONS.UPDATE_CHOICE:\n\t\t//   return { ...state, vistorImageBase64: action.payload.vistorImageBase64 };\n\tcase OPERATIONS.REORDER_CHOICE_LIST:\n\t\treturn {\n\t\t\t...state,\n\t\t\t\tchoices: action.payload.updatedChoices\n\t\t};\n\tcase OPERATIONS.CLEAR:\n\t\treturn {\n\t\t\t...state,\n\t\t\t...INITIAL_FIELD_STATE\n\t\t};\n    default:\n\t\treturn { ...state };\n\t}\n};","import { INITIAL_SUBMIT_STAGE, OPERATIONS } from '../Constants';\n\nexport default (state, action) => {\n\tswitch (action.type) {\n    \t// Handling form submit\n\tcase OPERATIONS.SUBMIT_STARTED:\n\t\treturn { ...state, submitted: false, loading: true };\n\n\tcase OPERATIONS.SUBMIT_COMPLETE:\n\t\treturn {\n\t\t\t...state,\n\t\t\tsubmitted: true,\n\t\t\tresponse: action.response,\n\t\t\terrorMessage: '',\n\t\t\tloading: false\n\t\t};\n\n\tcase OPERATIONS.SUBMIT_ERROR:\n\t\treturn {\n\t\t\t...state,\n\t\t\tsubmitted: false,\n\t\t\terrorMessage: action.errorMessage,\n\t\t\tloading: false\n\t\t};\n\n\tcase OPERATIONS.CLEAR:\n\t\treturn {\n\t\t\t...state,\n\t\t\t...INITIAL_SUBMIT_STAGE\n\t\t};\n\n\tdefault:\n\t\treturn { ...state };\n\t}\n};","import React, { useReducer, createContext } from 'react';\nimport { INITIAL_ERROR_STATE, INITIAL_FIELD_STATE, INITIAL_SUBMIT_STAGE } from '../Constants';\nimport errorReducer from '../reducers/errorReducer';\nimport fieldReducer from '../reducers/fieldReducer';\nimport submitReducer from '../reducers/submitReducer';\n\n// Creating Context in order to access global state from child components\nconst DispatchContext = createContext(null);\n\n// const DispatchContext = React.createContext(initialFieldState);\n\nconst DispatchProvider = ({ children }) => {\n\t// const [state, dispatch] = useReducer(reducer, initialFieldState);\n\tconst [error, dispatchError] = useReducer(errorReducer, INITIAL_ERROR_STATE);\n\tconst [field, dispatchField] = useReducer(fieldReducer, INITIAL_FIELD_STATE);\n\tconst [submit, dispatchSubmit] = useReducer(submitReducer, INITIAL_SUBMIT_STAGE);\n\n  \t// Global Dispatch Function\n  \tconst dispatch = action =>\n    [dispatchError, dispatchField, dispatchSubmit].forEach(fn => fn(action));\n\n\t// Global State\n\tconst state = {\n\t\terror,\n\t\tfield,\n\t\tsubmit\n\t};\n\n\treturn (\n\t\t<DispatchContext.Provider value={{ state, dispatch }}>\n\t\t\t{children}\n\t\t</DispatchContext.Provider>\n\t);\n};\n\nexport { DispatchContext, DispatchProvider };\n","import styled from 'styled-components';\n\nexport const ButtonWrapper = styled.button`{\n\n         // display:inline-block;\n        padding: 0.3em 1.2em;\n        margin: 0 0.5em 0.5em 0;\n        border-radius: 0.3rem;\n        box-sizing: border-box;\n        text-decoration: none;\n        font-size: ${props => (props.theme.size ? props.theme.size : '1.5rem')};\n        font-weight: normal;\n        text-align: center;\n        transition: all 0.2s;\n        // ? '#1B8728' : '#D93829'\n        \n        color: ${props => (props.theme.color ? props.theme.color : '#1B8728')};\n        background-color: '#FFFFFF'\n    }\n\n    &:hover{\n        color: #FFFFFF;\n        background-color: ${props => (props.theme.color ? props.theme.color : '#1B8728')};\n    }\n\n    @media all and (max-width:30em) {\n        button {\n            display:block;\n            margin:0.2em auto;\n        }\n    }\n`;","import React from 'react';\nimport { ButtonWrapper } from './style';\n\nconst Button = ({ action, text, theme}) => <ButtonWrapper theme={theme} onClick={action}>{text}</ButtonWrapper>;\n\nexport default Button;\n","import styled from 'styled-components';\n\nexport const ErrorListWrapper = styled.ul`    \n    color: #D93829;\n    font-weight: bold;\n    background-color: floralwhite;\n    //align-items: center;\n    display: flex;\n    padding: 0.5rem;\n    border-radius: 0.3rem;\n    border: 1px solid #D93829;\n    flex-flow: column wrap;\n    justify-content: flex-start;\n    list-style-type: none;\n`;","import React from 'react';\nimport {\n\tErrorListWrapper\n} from './style';\n\nconst ErrorList = ({ errors }) => errors && errors.length > 0 ? (\n\t<ErrorListWrapper>\n\t\t{errors.map(error => (\n\t\t\t<li key={error}>{error}</li>\n\t\t))}\n\t</ErrorListWrapper>\n) : null;\n\nexport default ErrorList;\n","import styled from 'styled-components';\n\nexport const InputWrapper = styled.input`\n    flex: 2;\n    font-size: 1rem;\n    padding: .6em 1.4em .5em .8em;\n    border: 1px solid #aaa;\n    box-shadow: 0 1px 0 1px rgba(0,0,0,.04);\n    border-radius: .5em;\n    -moz-appearance: none;\n    -webkit-appearance: none;\n    background-color: #fff;\n    margin: 0 0.5em 0.5em 0;\n`;","import React, { Fragment } from 'react';\nimport ErrorList from '../errorList';\nimport { InputWrapper } from './style';\n\nconst Input = ({ handleBlur, handleChange, inputType, name, value, readOnly, errors, required }) => (\n\t<Fragment>\n\t\t<InputWrapper\n\t\t\tid={name}\n\t\t\ttype={inputType}\n\t\t\tvalue={value}\n\t\t\tname={name}\n\t\t\tonChange={handleChange}\n\t\t\tonBlur={handleBlur}\n\t\t\treadOnly={readOnly}\n\t\t\trequired={required}\n\t\t/>\n\t\t<ErrorList errors={errors} />\n\t</Fragment>\n);\n\nexport default Input;\n","/**\n * File for I10n strings\n */\nexport const CHOICE_ALREADY_EXISTS = choice => `Choice ${choice} already exists. Please use a different value`;\nexport const FIELD_TITLE = 'Field Builder';\nexport const FIELD_CHOICES = 'Choices';\nexport const FIELD_DEFAULT_VALUE = 'Default Value';\nexport const FIELD_LABEL = 'Label';\nexport const FIELD_ORDER = 'Order';\nexport const FIELD_TYPE = 'Type';\nexport const FIELD_REQUIRED = 'A value is required.';\nexport const FIELD_SAVE_ERROR = 'Field was not saved.';\nexport const BUTTON_SAVE = 'Save';\nexport const BUTTON_CANCEL = 'Cancel';\nexport const BUTTON_CLEAR = 'Clear';\nexport const BUTTON_DELETE = 'Delete';\nexport const BUTTON_EDIT = 'Edit';\nexport const BUTTON_UPDATE = 'Update';\nexport const BUTTON_ADD_NEW_CHOICE = 'Add new choice';\nexport const REQUIRED_FIELD = 'Required field';\nexport const REACHED_MAX_LIMIT_FOR_CHOICES = maxCount => `Reached max limit. Cannot add more than ${maxCount} choices.`;\nexport const SAVE_SUCCESSFUL = 'Saved Successfully !!!';\nexport const SAVE_FAILED = 'Saved Failed.';","class ValidationUtil {\n\t/**\n   * Returns error message if the input is empty.\n   *\n   * @param args value of the Input field .\n   */\n\tisFieldEmpty (args) {\n\t\treturn !args;\n\t}\n\n\t/**\n   * Returns true if the max limit to add a choise is reached.\n   *\n   * @param list the actual choise list.\n   * @param maxLimit the maximum number of choices that can be added.\n   */\n\thasReachedMaxLimit (list, maxLimit) {\n\t\treturn list && list.length === maxLimit;\n\t}\n\n\t/**\n   * Returns true if the choice being added already exists.\n   *\n   * @param choices list of choices.\n   * @param choice actual choice that needs to be added.\n   */\n\tifExists (choices, choice) {\n\t\treturn choices.some(item => item.name === choice);\n\t}\n}\n\n// TODO atleast one choice required validation\nexport default new ValidationUtil();\n","import styled from 'styled-components';\n\nexport const ChoiceAddWrapper = styled.div`    \n    // display: flex;\n    // justify-content: flex-end;\n    width: 100%;\n`;\n\nexport const ChoiceAddInputWrapper = styled.div` \n    flex: 0.5;\n    display: flex;\n    justify-content: flex-end;\n    margin-top: 2rem;\n`;","import React, { useState, useContext, useEffect } from 'react';\nimport Button from '../../../elements/button';\nimport Input from '../../../elements/input';\nimport ErrorList from '../../../elements/errorList';\nimport { BUTTON_ADD_NEW_CHOICE } from '../../../MessageBundle';\nimport { MAX_CHOICES, OPERATIONS } from '../../../Constants';\nimport { DispatchContext } from '../../../context/fieldContext';\nimport ValidationUtil from '../../../helper/validation';\nimport {\n\tCHOICE_ALREADY_EXISTS,\n\tREACHED_MAX_LIMIT_FOR_CHOICES\n} from '../../../MessageBundle';\nimport { ChoiceAddWrapper, ChoiceAddInputWrapper } from './style';\n\nconst ChoiceAdd = () => {\n\tconst [choice, setChoice] = useState('');\n\tconst { state, dispatch } = useContext(DispatchContext);\n\n\tuseEffect(() => {\n\t\tvalidateInput(choice);\n\t}, [state.field.choices]);\n\n\tconst handleInputChange = event => {\n\t\tevent.preventDefault();\n\t\tconst { value } = event.target;\n\n\t\tsetChoice(value);\n\t\t// validateInput(value);\t\n\t};\n\n\tconst handleFormSubmit = event => {\n\t\tevent.preventDefault();\n\n\t\tconst errors = validateInput(choice);\n\t\tif (errors.length > 0) return;\n\n\t\tif (choice) {\n\t\t\tdispatch({\n\t\t\t\ttype: OPERATIONS.ADD_CHOICE,\n\t\t\t\tpayload: {\n\t\t\t\t\tchoice\n\t\t\t\t}\n\t\t\t});\n\t\t\tsetChoice('');\n\t\t}\n\t};\n\n\tconst validateInput = value => {\n\t\tconst errors = [];\n\t\t\t\tif(ValidationUtil.hasReachedMaxLimit(state.field.choices, MAX_CHOICES) && choice){\n\t\t\t\t\terrors.push(REACHED_MAX_LIMIT_FOR_CHOICES(MAX_CHOICES))\n\t\t\t\t}\n\n\t\t\t\tif(ValidationUtil.ifExists(state.field.choices, value)){\n\t\t\t\t\terrors.push(CHOICE_ALREADY_EXISTS(value))\n\t\t\t\t}\n\t\t\t\tdispatch({\n\t\t\t\t\t\t\ttype: OPERATIONS.HANDLE_CHANGE_FOR_ADD_CHOICE,\n\t\t\t\t\t\t\tpayload: {\n\t\t\t\t\t\t\t\terrors\n\t\t\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn errors;\n\t}\n\t\t\n\n\treturn (\n\t\t<ChoiceAddWrapper>\n\t\t\t<ChoiceAddInputWrapper>\n\t\t\t\t<Input\n\t\t\t\t\tvalue={choice}\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tname=\"name\"\n\t\t\t\t\thandleChange={handleInputChange}\n\t\t\t\t/>\n\t\t\t\t<Button text={BUTTON_ADD_NEW_CHOICE} action={handleFormSubmit} theme={ {size: '1rem', color: '#008094'} }/>\n\t\t\t</ChoiceAddInputWrapper>\t\n\t\t\t<ErrorList errors={state.error.addChoice} /> \n\t\t</ChoiceAddWrapper>\n\t);\n};\n\nexport default ChoiceAdd;\n","import styled from 'styled-components';\n\nexport const MessageBoxWrapper = styled.span`\n    color: ${props => (props.theme.color ? props.theme.color : 'red')};\n    font-weight: bold;\n    background-color: floralwhite;\n    align-items: center;\n    display: flex;\n    padding: 0.5rem;\n    border-radius: 0.3rem;\n    border: 1px solid ${props => (props.theme.color ? props.theme.color : 'red')};\n`;","import React from 'react'\nimport { MessageBoxWrapper } from './style';\n\nconst MessageBox = ({text, theme}) => {\n    return (\n        <MessageBoxWrapper theme={theme}>\n            {text}\n        </MessageBoxWrapper>\n    )\n}\n\nexport default MessageBox\n","import React, { useState, useContext } from 'react';\nimport Input from '../../../elements/input';\nimport Button from '../../../elements/button';\nimport MessageBox from '../../../elements/messageBox';\nimport { DispatchContext } from '../../../context/fieldContext';\nimport { OPERATIONS } from '../../../Constants';\nimport {\n\tBUTTON_CANCEL,\n\tBUTTON_DELETE,\n\tBUTTON_EDIT,\n\tBUTTON_UPDATE\n} from '../../../MessageBundle';\nimport Reorder, { reorder } from 'react-reorder';\nimport { get } from 'lodash';\n\nconst ChoiceGrid = () => {\n\tconst { state, dispatch } = useContext(DispatchContext);\n\tconst choices = state.field.choices;\n\t// const [choices, setChoices] = useState(state.field.choices);\n\tconst [currentChoice, setCurrentChoice] = useState({\n\t\tid: '',\n\t\tname: '',\n\t\tisEditing: false\n\t});\n\n\tconst handleInputChange = index => event => {\n\t\tconst { value } = event.target;\n\n\t\t// choices[index].name = value;\n\t\tsetCurrentChoice({\n\t\t\tid: choices[index].id,\n\t\t\tname: value,\n\t\t\tisEditing: true\n\t\t});\n\t\t// dispatch({\n\t\t// \ttype: OPERATIONS.HANDLE_CHANGE_FOR_EDIT_CHOICE,\n\t\t// \tpayload: {\n\t\t// \t\tchoice: currentChoice\n\t\t// \t}\n\t\t// });\n\t\t// updateChoice(choice);\n\t};\n\n\t// CRUD operations\n\tconst deleteChoice = id => {\n\t\tdispatch({\n\t\t\ttype: OPERATIONS.DELETE_CHOICE,\n\t\t\tpayload: {\n\t\t\t\tid\n\t\t\t}\n\t\t});\n\t};\n\n\tconst onReorder = (event, previousIndex, nextIndex) => {\n\t\treorderChoiceList(reorder(choices, previousIndex, nextIndex));\n\t};\n\n\tconst reorderChoiceList = updatedChoices => {\n\t\tdispatch({\n\t\t\ttype: OPERATIONS.REORDER_CHOICE_LIST,\n\t\t\tpayload: {\n\t\t\t\tupdatedChoices\n\t\t\t}\n\t\t});\n\t};\n\n\t\n\tconst dispatchUpdate = choice => {\n\t\t// todo empty error base of id\n\t\tdispatch({\n\t\t\ttype: OPERATIONS.UPDATE_CHOICE,\n\t\t\tpayload: {\n\t\t\t\tchoice: {\n\t\t\t\t\t...choice,\n\t\t\t\t\tisEditing: !choice.isEditing\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n\n\tconst cancelEditing = choice => event => {\n\t\tevent.preventDefault();\n\t\tsetCurrentChoice({});\t\n\t\tdispatchUpdate(choice);\n\t}\n\n\tconst editChoice = choice => event => {\n\t\tevent.preventDefault();\n\t\tdispatchUpdate(choice);\n\t}\n\n\tconst updateChoice = event => {\n\t\tevent.preventDefault();\n\t\t// const hasError = state.error.editChoices\n\t\t// \t.find(row => row.id === currentChoice.id)['error'];\n\n\t\t// if (hasError) return;\n\n\t\tdispatchUpdate(currentChoice);\n\t\tsetCurrentChoice({});\t\n\t};\n\n\n\treturn (\n\t\t<div>\n\t\t\t{choices.length > 0 ? (\n\t\t\t\t<Reorder\n\t\t\t\t\treorderId=\"choice-list\" // Unique ID that is used internally to track this list (required)\n\t\t\t\t\tdraggedClassName=\"dragged\" // Class name to be applied to dragged elements (optional), defaults to 'dragged'\n\t\t\t\t\tlock=\"horizontal\" // Lock the dragging direction (optional): vertical, horizontal (do not use with groups)\n\t\t\t\t\tonReorder={onReorder} // Callback when an item is dropped (you will need this to update your state)\n\t\t\t\t>\n\t\t\t\t\t{choices.map((choice, index) => (\n\t\t\t\t\t\t<div key={choice.id}>\n\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tname=\"name\"\n\t\t\t\t\t\t\t\tvalue={currentChoice.name || choice.name}\n\t\t\t\t\t\t\t\treadOnly={!choice.isEditing}\n\t\t\t\t\t\t\t\thandleChange={handleInputChange(index)}\n\t\t\t\t\t\t\t\terrors={get((state.error.editChoices).find(row => row.id === choice.id), 'error', [])}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\ttext={choice.isEditing ? BUTTON_UPDATE : BUTTON_EDIT}\n\t\t\t\t\t\t\t\taction={\n\t\t\t\t\t\t\t\t\tchoice.isEditing\n\t\t\t\t\t\t\t\t\t\t? updateChoice\n\t\t\t\t\t\t\t\t\t\t: editChoice(choice)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\ttheme={ {size: '1rem', color: '#1B8728'} }\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\ttext={choice.isEditing ? BUTTON_CANCEL : BUTTON_DELETE}\n\t\t\t\t\t\t\t\taction={\n\t\t\t\t\t\t\t\t\tchoice.isEditing\n\t\t\t\t\t\t\t\t\t\t? cancelEditing(choice)\n\t\t\t\t\t\t\t\t\t\t: () => deleteChoice(choice.id)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\ttheme={ {size: '1rem', color: '#D93829'} }\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t))}\n\t\t\t\t</Reorder>\n\t\t\t) : (\n\t\t\t\t<MessageBox text={'*No choices added'} theme={ {color: '#D67404'} }></MessageBox>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport default ChoiceGrid;\n","import React, { Fragment } from 'react';\nimport ChoiceAdd from './choiceAdd';\nimport ChoiceGrid from './choiceGrid';\n\nconst Choices = () => (\n\t<Fragment>\n\t\t<ChoiceGrid />\n\t\t<ChoiceAdd />\n\t</Fragment>\n);\n\nexport default Choices;\n","import styled from 'styled-components';\n\nexport const CheckboxWrapper = styled.input`    \n    margin: 0.5rem;\n`;","import React from 'react';\nimport { CheckboxWrapper } from './style';\n\nconst Checkbox = ({ checked, handleChange, name }) => (\n\t<CheckboxWrapper\n\t\tid={name}\n\t\tname={name}\n\t\ttype=\"checkbox\"\n\t\tchecked={checked}\n\t\tonChange={handleChange}\n\t/>\n);\n\nexport default Checkbox;\n","import styled from 'styled-components';\n\nexport const SelectWrapper = styled.select`\n    display: block;\n    font-size: 1rem;\n    color: #444;\n    line-height: 1.3;\n    padding: .6em 1.4em .5em .8em;\n    box-sizing: border-box; \n    border: 1px solid #aaa;\n    box-shadow: 0 1px 0 1px rgba(0,0,0,.04);\n    border-radius: .5em;\n    -moz-appearance: none;\n    -webkit-appearance: none;\n    background-color: #fff;\n    margin: 0 0.5em 0.5em 0;\n    `;","import React from 'react';\nimport { SelectWrapper } from './style';\n\nconst Select = ({ handleChange, name, options, value }) => (\n\t<SelectWrapper\n\t\tid={name}\n\t\tname={name}\n\t\tvalue={value}\n\t\tonChange={handleChange}\n\t>\n\t\t{options.map(opt => (\n\t\t\t<option key={opt.value} value={opt.value}>{opt.label}</option>\n\t\t))}\n\t</SelectWrapper>\n);\n\nexport default Select;\n","import styled from 'styled-components';\n\nexport const LabelWrapper = styled.label`\n\t// display: inline-block;\n    flex: 1;\n    margin: 1rem 0;\n    // align-self: center;\n`;","import React from 'react';\nimport { LabelWrapper } from './style';\n\nconst Label = ({ label }) => (\n\t<LabelWrapper>\n\t\t{label}\n\t</LabelWrapper>\n);\n\nexport default Label;\n","import styled from 'styled-components';\n\nexport const FieldBodyWrapper = styled.div`\n\tdisplay: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n`;\n\nexport const FormGroupWrapper = styled.div`\n\tdisplay: flex;\n    // justify-content: flex-start;\n    flex-flow: row wrap;\n    margin-top: 1em;\n    width: 80%;\n    align-items: center;\n\n`;\n","\nimport React, { useContext } from 'react';\nimport { DispatchContext } from '../../../context/fieldContext';\nimport Choices from '../../choices';\nimport Checkbox from '../../../elements/checkbox';\nimport Select from '../../../elements/select';\nimport Label from '../../../elements/label';\nimport Input from '../../../elements/input';\nimport {\n\tFIELD_CHOICES,\n\tFIELD_DEFAULT_VALUE,\n\tFIELD_LABEL,\n\tFIELD_ORDER,\n\tFIELD_REQUIRED,\n\tFIELD_TYPE\n} from '../../../MessageBundle';\nimport { TYPE, OPERATIONS, ORDER } from '../../../Constants';\nimport { FieldBodyWrapper,  FormGroupWrapper } from './style';\n\nconst FieldBody = () => {\n\tconst { state, dispatch } = useContext(DispatchContext);\n\t\n\t// Handling events\n\tconst handleInputChange = event => {\n\t\tconst { name, value } = event.target;\n\n\t\tdispatch({\n\t\t\ttype: OPERATIONS.HANDLE_INPUT_CHANGE,\n\t\t\tpayload: {\n\t\t\t\tname,\n\t\t\t\tvalue\n\t\t\t}\n\t\t});\n\t};\n\n\tconst handleCheckBoxChange = event => {\n\t\tconst { name } = event.target;\n\n\t\tdispatch({\n\t\t\ttype: OPERATIONS.HANDLE_CHECK_BOX_CHANGE,\n\t\t\tpayload: {\n\t\t\t\tname\n\t\t\t}\n\t\t});\n\t};\n\n\treturn (\n\t\t<FieldBodyWrapper>\n\t\t\t<FormGroupWrapper>\n\t\t\t\t<Label label={FIELD_LABEL} />\n\t\t\t\t<Input\n\t\t\t\t\tvalue={state.field.label}\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tname=\"label\"\n\t\t\t\t\thandleChange={handleInputChange}\n\t\t\t\t\terrors={state.error.label}\n\t\t\t\t/>\t\t\t\t\n\t\t\t</FormGroupWrapper>\n\t\t\t<FormGroupWrapper>\n\t\t\t\t<Label label={FIELD_TYPE} />\n\t\t\t\t<Select\n\t\t\t\t\thandleChange={handleInputChange}\n\t\t\t\t\toptions={TYPE}\n\t\t\t\t\tvalue={state.field.type}\n\t\t\t\t\tname=\"type\"\n\t\t\t\t/>\n\t\t\t\t<Checkbox\n\t\t\t\t\tchecked={state.field.required}\n\t\t\t\t\thandleChange={handleCheckBoxChange}\n\t\t\t\t\tname=\"required\"\n\t\t\t\t/>\n\t\t\t\t<Label label={FIELD_REQUIRED} />\n\t\t\t</FormGroupWrapper>\n\t\t\t<FormGroupWrapper>\n\t\t\t\t<Label label={FIELD_DEFAULT_VALUE} />\n\t\t\t\t<Input\n\t\t\t\t\tvalue={state.field.default}\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tname=\"default\"\n\t\t\t\t\thandleChange={handleInputChange}\n\t\t\t\t/>\n\t\t\t</FormGroupWrapper>\n\t\t\t<FormGroupWrapper>\n\t\t\t\t<Label label={FIELD_CHOICES} />\n\t\t\t\t<Choices />\n\t\t\t</FormGroupWrapper>\n\t\t\t<FormGroupWrapper>\n\t\t\t\t<Label label={FIELD_ORDER} />\n\t\t\t\t<Select\n\t\t\t\t\thandleChange={handleInputChange}\n\t\t\t\t\toptions={ORDER}\n\t\t\t\t\tvalue={state.field.displayOrder}\n\t\t\t\t\tname=\"displayOrder\"\n\t\t\t\t/>\n\t\t\t</FormGroupWrapper>\n\t\t</FieldBodyWrapper>\n\t);\n};\n\nexport default FieldBody;\n","const FieldService = {\n\tgetField: function (id) {\n\t\treturn {\n\t\t\tlabel: 'Sales region',\n\t\t\trequired: false,\n\t\t\tchoices: [\n\t\t\t\t'Asia',\n\t\t\t\t'Australia',\n\t\t\t\t'Western Europe',\n\t\t\t\t'North America',\n\t\t\t\t'Eastern Europe',\n\t\t\t\t'Latin America',\n\t\t\t\t'Middle East and Africa'\n\t\t\t],\n\t\t\tdisplayAlpha: true,\n\t\t\tdefault: 'North America'\n\t\t};\n\t},\n\tsaveField: function (url, fieldJson) {\n\t\t// Add the code here to call the API (or temporarily, just log fieldJson to the console)\n\t\t// todo(shruti): Use async await\n\t\treturn fetch(url, {\n\t\t\tmethod: 'POST',\n\t\t\tbody: JSON.stringify(fieldJson),\n\t\t\theaders: {\n\t\t\t\t'Accept': 'application/json',\n\t\t\t\t'Content-Type': 'application/json'\n\t\t\t}\n\t\t});\n\t}\n};\n\nexport default FieldService;\n","import styled from 'styled-components';\n\nexport const FieldFooterButtonWrapper = styled.div`\n\tdisplay: flex;\n    flex-direction: row;\n    justify-content: center;\n    padding: 1rem;\n    height: 70px;\n    align-items: center;\n`;\n\nexport const FieldFooterMessageWrapper = styled.div`\n\tdisplay: flex;\n    flex-direction: row;\n    justify-content: center;\n    padding-bottom: 1.5rem;\n    align-items: center;\n`;\n\nexport const FieldFooterWrapper = styled.div`\n\tdisplay: flex;\n    flex-direction: column;\n    justify-content: center;\n`;\n","import React, { useContext } from 'react';\nimport Button from '../../../elements/button';\nimport MessageBox from '../../../elements/messageBox';\nimport ErrorList from '../../../elements/errorList';\nimport { MOCK_URL, OPERATIONS, MAX_CHOICES } from '../../../Constants';\nimport { DispatchContext } from '../../../context/fieldContext';\nimport FieldService from '../../../services/mockService';\nimport {\n\tBUTTON_SAVE,\n\tBUTTON_CLEAR,\n\tFIELD_LABEL,\n\tFIELD_SAVE_ERROR,\n\tSAVE_FAILED,\n\tSAVE_SUCCESSFUL,\n\tREQUIRED_FIELD,\n\tREACHED_MAX_LIMIT_FOR_CHOICES\n} from '../../../MessageBundle';\nimport {\n\tFieldFooterWrapper, FieldFooterButtonWrapper, FieldFooterMessageWrapper\n} from './style';\nimport ValidationUtil from '../../../helper/validation';\n\nconst FieldFooter = () => {\n\tconst { state, dispatch } = useContext(DispatchContext);\n\n\tconst handleFormSubmit = async event => {\n\t\tevent.preventDefault();\n\t\tdispatch({\n\t\t\t\ttype: OPERATIONS.CLEAR_ERROR\n\t\t\t});\n\n\t\tconst errors = validateInputFields(state);\n\t\tif (errors.label.length > 0 || errors.default.length > 0) return;\n\n\t\tconsole.log('Logging POST data', state.field);\n\n\t\tdispatch({ type: OPERATIONS.SUBMIT_STARTED });\n\n\t\ttry {\n\t\t\tconst responseJson = await FieldService.saveField(\n\t\t\t\tMOCK_URL,\n\t\t\t\tstate.field\n\t\t\t).then(resp => resp.json());\n\n\t\t\tdispatch({ type: OPERATIONS.SUBMIT_COMPLETE, response: responseJson });\n\t\t} catch (error) {\n\t\t\tdispatch({\n\t\t\t\ttype: OPERATIONS.SUBMIT_ERROR,\n\t\t\t\terrorMessage: FIELD_SAVE_ERROR\n\t\t\t});\n\t\t}\n\t};\n\n\tconst validateInputFields = state => {\n\t\tconst errors = {};\n\t\tconst defaultValue = state.field.default;\n\n\t\t// Checking for label field\n\t\terrors['label'] = [];\n\t\tif(ValidationUtil.isFieldEmpty(state.field.label)){\n\t\t\t\t\terrors['label'].push(`${FIELD_LABEL} : ${REQUIRED_FIELD}`);\n\t\t\t\t}\t\n\n\t\t// Checking for default field\n\t\terrors['default'] = [];\n\t\tif(defaultValue \n\t\t\t&& !state.field.choices.some(choice => choice.name === defaultValue)\n\t\t\t&& ValidationUtil.hasReachedMaxLimit(state.field.choices, MAX_CHOICES)){\n\t\t\t\t\terrors['default'].push(REACHED_MAX_LIMIT_FOR_CHOICES(MAX_CHOICES))\n\t\t\t\t}\n\n\t\tdispatch({\n\t\t\ttype: OPERATIONS.SET_ERROR_ON_SUBMIT,\n\t\t\tpayload: {\n\t\t\t\terrors\n\t\t\t\t}\n\t\t});\n\n\t\treturn errors;\n   }\n\n\t// const handleCancelForm = event => {\n\t// \tevent.preventDefault();\n\t// \tconsole.log('CANCEL BUTTON CLICKED');\n\t// };\n\n\tconst handleClearForm = event => {\n\t\tevent.preventDefault();\n\t\tdispatch({ type: OPERATIONS.CLEAR });\n\t};\n\n\n\treturn (\n\t\t<FieldFooterWrapper>\n\t\t\t<FieldFooterButtonWrapper>\n\t\t\t\t<Button text={BUTTON_SAVE} action={handleFormSubmit} theme={ { size: '1.5rem', color: '#1B8728' } } />\n\t\t\t\t{/* <Button text={BUTTON_CANCEL} action={handleCancelForm} /> */}\n\t\t\t\t<Button text={BUTTON_CLEAR} action={handleClearForm} theme={ { size: '1.5rem', color: '#D93829' } } />\n\t\t\t</FieldFooterButtonWrapper>\n\t\t\t<FieldFooterMessageWrapper>\n\t\t\t\t{state.submit.submitted &&\n\t\t\t\t\t<MessageBox text={SAVE_SUCCESSFUL} theme={ { color: '#1B8728' } }></MessageBox>}\n\t\t\t\t{state.submit.errorMessage &&\n\t\t\t\t\t<MessageBox text={SAVE_FAILED} theme={ { size: '1.5rem', color: '#D93829' } }></MessageBox>}\n\t\t\t</FieldFooterMessageWrapper>\n\t\t\t<ErrorList errors={state.error.label} />\n\t\t\t<ErrorList errors={state.error.default} /> \n\t\t</FieldFooterWrapper>\n\t);\n};\n\nexport default FieldFooter;\n","import styled from 'styled-components';\n\n\nexport const TitleWrapper = styled.div`\n\tfont-size: 1.5rem;\n    font-weight: bold;\n    color: ${props => (props.primary ? '#45687F' : 'palevioletred')};\n    border: ${props =>\n    props.primary ? '2px solid #DFEAF3' : '2px solid #73E3FF'};\n    background-color: ${props => (props.primary ? '#DCEDF5' : 'palevioletred')};\n    padding: 0.5em;\n`;","import React from 'react';\nimport { TitleWrapper } from './style';\n\nconst Title = ({ text, primary }) => (\n    <TitleWrapper primary>\n        <div>{text}</div>\n    </TitleWrapper>\n)\n\nexport default Title;\n","import styled from 'styled-components';\n\nexport const FieldWrapper = styled.div`\n\tbackground-color: rgb(241, 245, 249);\n    border-radius: 5px;\n\tbackground: #fff;\n\tmax-width: 640px;\n\tmin-height: 800px;\n\tmargin: 1em auto;\n\t// padding: 1em; \n\tborder: 1px solid #DFEAF3\n\t// width: 50%;\n\t// height: 100%;\n\t// margin: 0 25% 0 25%;\n`;","import React from 'react';\nimport FieldBody from './fieldBody';\nimport FieldFooter from './fieldFooter';\nimport Title from '../../elements/title';\nimport { FIELD_TITLE } from '../../MessageBundle'; // Get strings from message bundle\nimport {\n\tFieldWrapper,\n} from './style';\n\nconst Field = () => (\n\t<FieldWrapper>\n\t\t<Title primary text={FIELD_TITLE} />\n\t\t<form>\n\t\t\t<FieldBody />\n\t\t\t<FieldFooter />\n\t\t</form>\n\t</FieldWrapper>\n);\n\nexport default Field;\n","import React from 'react';\nimport Field from './components/field';\nimport { DispatchProvider } from './context/fieldContext';\n/**\n * Main application\n */\nfunction App () {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<DispatchProvider>\n\t\t\t\t<Field />\n\t\t\t</DispatchProvider>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n    \t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n/* eslint-disable */\nexport function register (config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW (swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then(registration => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl)\n\t\t.then(response => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\n\t\t\tif (\n\t\t\t\tresponse.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t'No internet connection found. App is running in offline mode.'\n\t\t\t);\n\t\t});\n}\n\nexport function unregister () {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\tregistration.unregister();\n\t\t});\n\t}\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}