{"version":3,"sources":["Constants.js","reducers/errorReducer.js","reducers/fieldReducer.js","reducers/submitReducer.js","context/fieldContext.js","elements/button/style.js","elements/button/index.js","elements/errorList/style.js","elements/errorList/index.js","elements/input/style.js","elements/input/index.js","helper/validation.js","MessageBundle.js","components/choices/choiceAdd/style.js","components/choices/choiceAdd/index.js","elements/messageBox/style.js","elements/messageBox/index.js","components/choices/choiceGrid/index.js","components/choices/index.js","elements/checkbox/style.js","elements/checkbox/index.js","elements/select/style.js","elements/select/index.js","elements/label/style.js","elements/label/index.js","components/field/fieldBody/style.js","components/field/fieldBody/index.js","services/mockService.js","components/field/fieldFooter/style.js","components/field/fieldFooter/index.js","elements/title/style.js","elements/title/index.js","components/field/style.js","components/field/index.js","App.js","serviceWorker.js","index.js"],"names":["TYPE","label","value","ORDER","OPERATIONS","ADD_CHOICE","DELETE_CHOICE","REORDER_CHOICE_LIST","SET_ERROR","INPUT_CHANGE","CHECK_BOX_CHANGE","SUBMIT_STARTED","SUBMIT_COMPLETE","SUBMIT_ERROR","INITIAL_FIELD_STATE","type","required","default","choices","displayOrder","INITIAL_ERROR_STATE","addChoice","editChoices","INITIAL_SUBMIT_STAGE","submitted","loading","errorMessage","response","state","action","payload","errors","CLEAR","name","id","uuid","choice","isEditing","filter","updatedChoices","DispatchContext","createContext","DispatchProvider","children","useReducer","errorReducer","error","dispatchError","fieldReducer","field","dispatchField","submitReducer","submit","dispatchSubmit","Provider","dispatch","forEach","fn","ButtonWrapper","styled","button","props","theme","size","color","Button","text","onClick","ErrorListWrapper","div","ErrorList","length","map","key","InputWrapper","input","Input","handleBlur","handleChange","inputType","readOnly","disabled","onChange","onBlur","args","list","maxLimit","some","item","REACHED_MAX_LIMIT_FOR_CHOICES","maxCount","ChoiceAddWrapper","ChoiceAddInputWrapper","ChoiceAdd","useState","setChoice","useContext","validateInput","ValidationUtil","hasReachedMaxLimit","push","ifExists","CHOICE_ALREADY_EXISTS","event","preventDefault","target","MessageBoxWrapper","span","MessageBox","ChoiceGrid","reorderChoiceList","reorderId","draggedClassName","lock","onReorder","previousIndex","nextIndex","reorder","Choices","CheckboxWrapper","Checkbox","checked","SelectWrapper","select","Select","options","opt","LabelWrapper","Label","FieldBodyWrapper","FormGroupWrapper","FieldBody","handleInputChange","FieldService","getField","saveField","url","fieldJson","fetch","method","body","JSON","stringify","headers","FieldFooterButtonWrapper","FieldFooterMessageWrapper","FieldFooterWrapper","FieldFooter","handleFormSubmit","a","validateInputFields","console","log","then","resp","json","responseJson","defaultValue","isFieldEmpty","TitleWrapper","backgroundColor","Title","FieldWrapper","Field","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.187194f4.chunk.js","sourcesContent":["export const TYPE = [\n\t{ label: 'Multi-Select', value: 'multiSelect' },\n\t{ label: 'Single-Select', value: 'singleSelect' }\n];\n\nexport const ORDER = [\n\t{ label: 'Display choices in Alphabetical Order', value: 'alphabetical' },\n\t{ label: 'Display choices in Top Down Order', value: 'topDown' },\n\t{ label: 'Display choices in Bottom Up Order', value: 'bottomUp' }\n];\n\nexport const MOCK_URL = 'http://www.mocky.io/v2/566061f21200008e3aabd919';\n\nexport const MAX_CHOICES = 1;\n\nexport const OPERATIONS = {\n\tADD_CHOICE: 'add_choice',\n\tDELETE_CHOICE: 'delete_choice',\n\tREORDER_CHOICE_LIST: 'reorder_choice',\n\tSET_ERROR: 'set_error',\n\tINPUT_CHANGE: 'input_change',\n\tCHECK_BOX_CHANGE: 'checkbox_change',\n\tSUBMIT_STARTED: 'submit_started',\n\tSUBMIT_COMPLETE: 'submit_completed',\n\tSUBMIT_ERROR: 'submit_error'\n};\n\n// Setting initial state for the Global reducer\nexport const INITIAL_FIELD_STATE = {\n\tlabel: '',\n\ttype: 'multiSelect',\n\trequired: false,\n\tdefault: '',\n\tchoices: [],\n\tdisplayOrder: 'alphabetical'\n};\n\nexport const INITIAL_ERROR_STATE = {\n\tlabel: [],\n\tdefault: [],\n\taddChoice: [],\n\teditChoices: []\n};\n\nexport const INITIAL_SUBMIT_STAGE = {\n\tsubmitted: false,\n\tloading: false,\n\terrorMessage: '',\n\tresponse: ''\n};\n","import { INITIAL_ERROR_STATE, OPERATIONS } from '../Constants';\n\nexport default (state, action) => {\n\tswitch (action.type) {\n\tcase OPERATIONS.SET_ERROR:\n\t\treturn {\n\t\t\t...state,\n\t\t\t...action.payload.errors\n\t\t};\n\tcase OPERATIONS.CLEAR:\n\t\treturn {\n\t\t\t...state,\n\t\t\t...INITIAL_ERROR_STATE\n\t\t};\n\tdefault:\n\t\treturn { ...state };\n\t}\n};\n","import { INITIAL_FIELD_STATE, OPERATIONS } from '../Constants';\nimport uuid from 'uuid/v4';\n\nexport default (state, action) => {\n\tswitch (action.type) {\n\t// Handling events\n\tcase OPERATIONS.INPUT_CHANGE:\n\t\treturn {\n\t\t\t...state,\n\t\t\t[action.payload.name]: action.payload.value\n\t\t};\n\tcase OPERATIONS.CHECK_BOX_CHANGE:\n\t\treturn {\n\t\t\t...state,\n\t\t\t[action.payload.name]: !state[action.payload.name]\n\t\t};\n\t// Handling operations for Choices\n\tcase OPERATIONS.ADD_CHOICE:\n\t\treturn {\n\t\t\t...state,\n\t\t\tchoices: [\n\t\t\t\t...state.choices,\n\t\t\t\t{\n\t\t\t\t\tid: uuid(),\n\t\t\t\t\tname: action.payload.choice,\n\t\t\t\t\tisEditing: false\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\tcase OPERATIONS.DELETE_CHOICE:\n\t\treturn {\n\t\t\t...state,\n\t\t\tchoices: state.choices.filter(\n\t\t\t\tchoice => choice.id !== action.payload.id\n\t\t\t)\n\t\t};\n\tcase OPERATIONS.REORDER_CHOICE_LIST:\n\t\treturn {\n\t\t\t...state,\n\t\t\tchoices: action.payload.updatedChoices\n\t\t};\n\tcase OPERATIONS.CLEAR:\n\t\treturn {\n\t\t\t...state,\n\t\t\t...INITIAL_FIELD_STATE\n\t\t};\n\tdefault:\n\t\treturn { ...state };\n\t}\n};\n","import { INITIAL_SUBMIT_STAGE, OPERATIONS } from '../Constants';\n\nexport default (state, action) => {\n\tswitch (action.type) {\n\t// Handling form submit\n\tcase OPERATIONS.SUBMIT_STARTED:\n\t\treturn { ...state, submitted: false, loading: true };\n\n\tcase OPERATIONS.SUBMIT_COMPLETE:\n\t\treturn {\n\t\t\t...state,\n\t\t\tsubmitted: true,\n\t\t\tresponse: action.response,\n\t\t\terrorMessage: '',\n\t\t\tloading: false\n\t\t};\n\n\tcase OPERATIONS.SUBMIT_ERROR:\n\t\treturn {\n\t\t\t...state,\n\t\t\tsubmitted: false,\n\t\t\terrorMessage: action.errorMessage,\n\t\t\tloading: false\n\t\t};\n\n\tcase OPERATIONS.CLEAR:\n\t\treturn {\n\t\t\t...state,\n\t\t\t...INITIAL_SUBMIT_STAGE\n\t\t};\n\n\tdefault:\n\t\treturn { ...state };\n\t}\n};\n","import React, { useReducer, createContext } from 'react';\nimport { INITIAL_ERROR_STATE, INITIAL_FIELD_STATE, INITIAL_SUBMIT_STAGE } from '../Constants';\nimport errorReducer from '../reducers/errorReducer';\nimport fieldReducer from '../reducers/fieldReducer';\nimport submitReducer from '../reducers/submitReducer';\n\n// Creating Context in order to access global state from child components\nconst DispatchContext = createContext(null);\n\nconst DispatchProvider = ({ children }) => {\n\tconst [error, dispatchError] = useReducer(errorReducer, INITIAL_ERROR_STATE);\n\tconst [field, dispatchField] = useReducer(fieldReducer, INITIAL_FIELD_STATE);\n\tconst [submit, dispatchSubmit] = useReducer(submitReducer, INITIAL_SUBMIT_STAGE);\n\n\t// Global Dispatch Function\n\tconst dispatch = action =>\n\t\t[dispatchError, dispatchField, dispatchSubmit].forEach(fn => fn(action));\n\n\t// Global State\n\tconst state = {\n\t\terror,\n\t\tfield,\n\t\tsubmit\n\t};\n\n\treturn (\n\t\t<DispatchContext.Provider value={{ state, dispatch }}>\n\t\t\t{children}\n\t\t</DispatchContext.Provider>\n\t);\n};\n\nexport { DispatchContext, DispatchProvider };\n","import styled from 'styled-components';\n\nexport const ButtonWrapper = styled.button`{\n        padding: 0.3em 1.2em;\n        margin: 0 0.5em 0.5em 0;\n        border-radius: 0.3rem;\n        box-sizing: border-box;\n        text-decoration: none;\n        font-size: ${props => (props.theme.size ? props.theme.size : '1.5rem')};\n        font-weight: normal;\n        text-align: center;\n        transition: all 0.2s;\n        color: ${props => (props.theme.color ? props.theme.color : '#1B8728')};\n        background-color: '#FFFFFF'\n    }\n\n    &:hover{\n        color: #FFFFFF;\n        background-color: ${props => (props.theme.color ? props.theme.color : '#1B8728')};\n    }\n`;\n","import React from 'react';\nimport { ButtonWrapper } from './style';\n\nconst Button = ({ action, text, theme }) => <ButtonWrapper theme={theme} onClick={action}>{text}</ButtonWrapper>;\n\nexport default Button;\n","import styled from 'styled-components';\n\nexport const ErrorListWrapper = styled.div`    \n    color: #D93829;\n    font-weight: bold;\n    display: flex;\n    padding: 0.5rem;\n    border-radius: 0.3rem;\n    flex-flow: column wrap;\n    list-style-type: none;\n    margin: 0;\n    align-items: center;\n`;\n","import React from 'react';\nimport {\n\tErrorListWrapper\n} from './style';\n\nconst ErrorList = ({ errors }) => errors && errors.length > 0 ? (\n\t<ErrorListWrapper>\n\t\t{errors.map(error => (\n\t\t\t<span key={error}>{error}</span>\n\t\t))}\n\t</ErrorListWrapper>\n) : null;\n\nexport default ErrorList;\n","import styled from 'styled-components';\n\nexport const InputWrapper = styled.input`\n    flex: 2;\n    font-size: 1rem;\n    padding: .6em 1.4em .5em .8em;\n    border: 1px solid #aaa;\n    box-shadow: 0 1px 0 1px rgba(0,0,0,.04);\n    border-radius: .5em;\n    -moz-appearance: none;\n    -webkit-appearance: none;\n    background-color: #fff;\n    margin: 0 0.5em 0.5em 0;\n`;\n","import React, { Fragment } from 'react';\nimport ErrorList from '../errorList';\nimport { InputWrapper } from './style';\n\nconst Input = ({ handleBlur, handleChange, inputType, name, value, readOnly, errors, required, disabled }) => (\n\t<Fragment>\n\t\t<InputWrapper\n\t\t\tid={name}\n\t\t\ttype={inputType}\n\t\t\tvalue={value}\n\t\t\tname={name}\n\t\t\tonChange={handleChange}\n\t\t\tonBlur={handleBlur}\n\t\t\treadOnly={readOnly}\n\t\t\trequired={required}\n\t\t\tdisabled={disabled}\n\t\t/>\n\t\t<ErrorList errors={errors} />\n\t</Fragment>\n);\n\nexport default Input;\n","class ValidationUtil {\n\t/**\n   * Returns error message if the input is empty.\n   *\n   * @param args value of the Input field .\n   */\n\tisFieldEmpty (args) {\n\t\treturn !args;\n\t}\n\n\t/**\n   * Returns true if the max limit to add a choise is reached.\n   *\n   * @param list the actual choise list.\n   * @param maxLimit the maximum number of choices that can be added.\n   */\n\thasReachedMaxLimit (list, maxLimit) {\n\t\treturn list && list.length === maxLimit;\n\t}\n\n\t/**\n   * Returns true if the choice to be added already exists.\n   *\n   * @param choices list of choices.\n   * @param choice actual choice that needs to be added.\n   */\n\tifExists (choices, choice) {\n\t\treturn choices.some(item => item.name === choice);\n\t}\n}\n\nexport default new ValidationUtil();\n","/**\n * File for I10n strings\n */\nexport const CHOICE_ALREADY_EXISTS = choice => `Choice '${choice}' already exists. Please use a different value`;\nexport const FIELD_TITLE = 'Field Builder';\nexport const FIELD_CHOICES = 'Choices';\nexport const FIELD_DEFAULT_VALUE = 'Default Value';\nexport const FIELD_LABEL = 'Label';\nexport const FIELD_ORDER = 'Order';\nexport const FIELD_TYPE = 'Type';\nexport const FIELD_REQUIRED = 'A value is required.';\nexport const FIELD_SAVE_ERROR = 'Field was not saved.';\nexport const BUTTON_SAVE = 'Save';\nexport const BUTTON_CANCEL = 'Cancel';\nexport const BUTTON_CLEAR = 'Clear';\nexport const BUTTON_DELETE = 'Delete';\nexport const BUTTON_EDIT = 'Edit';\nexport const BUTTON_UPDATE = 'Update';\nexport const BUTTON_ADD_NEW_CHOICE = 'Add new choice';\nexport const REQUIRED_FIELD = 'Required field.';\nexport const REACHED_MAX_LIMIT_FOR_CHOICES = maxCount => `Reached max limit. Cannot add more than ${maxCount} choices.`;\nexport const SAVE_SUCCESSFUL = 'Saved Successfully !!!';\nexport const SAVE_FAILED = 'Saved Failed.';\n","import styled from 'styled-components';\n\nexport const ChoiceAddWrapper = styled.div`    \n    width: 100%;\n`;\n\nexport const ChoiceAddInputWrapper = styled.div` \n    flex: 0.5;\n    display: flex;\n    justify-content: flex-end;\n    margin-top: 2rem;\n`;\n","import React, { useState, useContext } from 'react';\nimport Button from '../../../elements/button';\nimport Input from '../../../elements/input';\nimport ErrorList from '../../../elements/errorList';\nimport { MAX_CHOICES, OPERATIONS } from '../../../Constants';\nimport { DispatchContext } from '../../../context/fieldContext';\nimport ValidationUtil from '../../../helper/validation';\nimport {\n\tBUTTON_ADD_NEW_CHOICE,\n\tCHOICE_ALREADY_EXISTS,\n\tREACHED_MAX_LIMIT_FOR_CHOICES\n} from '../../../MessageBundle';\nimport { ChoiceAddWrapper, ChoiceAddInputWrapper } from './style';\n\nconst ChoiceAdd = () => {\n\tconst [choice, setChoice] = useState('');\n\tconst { state, dispatch } = useContext(DispatchContext);\n\n\tconst handleInputChange = event => {\n\t\tevent.preventDefault();\n\t\tconst { value } = event.target;\n\n\t\tsetChoice(value);\n\t};\n\n\tconst handleFormSubmit = event => {\n\t\tconst errors = validateInput(choice);\n\n\t\tif (errors.addChoice.length > 0) return;\n\n\t\tif (choice) {\n\t\t\tdispatch({\n\t\t\t\ttype: OPERATIONS.ADD_CHOICE,\n\t\t\t\tpayload: {\n\t\t\t\t\tchoice\n\t\t\t\t}\n\t\t\t});\n\t\t\tsetChoice('');\n\t\t}\n\n\t\tevent.preventDefault();\n\t};\n\n\tconst validateInput = value => {\n\t\tconst errors = {\n\t\t\t'addChoice': []\n\t\t};\n\n\t\tif (ValidationUtil.hasReachedMaxLimit(state.field.choices, MAX_CHOICES) && choice) {\n\t\t\terrors['addChoice'].push(REACHED_MAX_LIMIT_FOR_CHOICES(MAX_CHOICES));\n\t\t}\n\n\t\tif (ValidationUtil.ifExists(state.field.choices, value)) {\n\t\t\terrors['addChoice'].push(CHOICE_ALREADY_EXISTS(value));\n\t\t}\n\t\tdispatch({\n\t\t\ttype: OPERATIONS.SET_ERROR,\n\t\t\tpayload: {\n\t\t\t\terrors\n\t\t\t}\n\t\t});\n\n\t\treturn errors;\n\t};\n\n\treturn (\n\t\t<ChoiceAddWrapper>\n\t\t\t<ChoiceAddInputWrapper>\n\t\t\t\t<Input\n\t\t\t\t\tvalue={choice}\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tname=\"name\"\n\t\t\t\t\thandleChange={handleInputChange}\n\t\t\t\t/>\n\t\t\t\t<Button text={BUTTON_ADD_NEW_CHOICE} action={handleFormSubmit} theme={ { size: '1rem', color: '#008094' } }/>\n\t\t\t</ChoiceAddInputWrapper>\n\t\t\t<ErrorList errors={state.error.addChoice} />\n\t\t</ChoiceAddWrapper>\n\t);\n};\n\nexport default ChoiceAdd;\n","import styled from 'styled-components';\n\nexport const MessageBoxWrapper = styled.span`\n    color: ${props => (props.theme.color ? props.theme.color : 'red')};\n    font-weight: bold;\n    background-color: floralwhite;\n    align-items: center;\n    display: flex;\n    padding: 0.5rem;\n    border-radius: 0.3rem;\n    border: 1px solid ${props => (props.theme.color ? props.theme.color : 'red')};\n    margin: 0 0.5em 0.5em 0;\n`;\n","import React from 'react';\nimport { MessageBoxWrapper } from './style';\n\nconst MessageBox = ({ text, theme }) => (\n\t<MessageBoxWrapper theme={theme}>\n\t\t{text}\n\t</MessageBoxWrapper>\n);\n\nexport default MessageBox;\n","import React, { useContext } from 'react';\nimport Input from '../../../elements/input';\nimport Button from '../../../elements/button';\nimport MessageBox from '../../../elements/messageBox';\nimport { DispatchContext } from '../../../context/fieldContext';\nimport { OPERATIONS } from '../../../Constants';\nimport { BUTTON_DELETE } from '../../../MessageBundle';\nimport Reorder, { reorder } from 'react-reorder';\n\nconst ChoiceGrid = () => {\n\tconst { state, dispatch } = useContext(DispatchContext);\n\tconst choices = state.field.choices;\n\n\tconst deleteChoice = id => {\n\t\tdispatch({\n\t\t\ttype: OPERATIONS.DELETE_CHOICE,\n\t\t\tpayload: {\n\t\t\t\tid\n\t\t\t}\n\t\t});\n\t};\n\n\tconst onReorder = (event, previousIndex, nextIndex) => {\n\t\treorderChoiceList(reorder(choices, previousIndex, nextIndex));\n\t};\n\n\tconst reorderChoiceList = updatedChoices => {\n\t\tdispatch({\n\t\t\ttype: OPERATIONS.REORDER_CHOICE_LIST,\n\t\t\tpayload: {\n\t\t\t\tupdatedChoices\n\t\t\t}\n\t\t});\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t{choices.length > 0 ? (\n\t\t\t\t<Reorder\n\t\t\t\t\treorderId=\"choice-list\" // Unique ID that is used internally to track this list (required)\n\t\t\t\t\tdraggedClassName=\"dragged\" // Class name to be applied to dragged elements (optional), defaults to 'dragged'\n\t\t\t\t\tlock=\"horizontal\" // Lock the dragging direction (optional): vertical, horizontal (do not use with groups)\n\t\t\t\t\tonReorder={onReorder} // Callback when an item is dropped (you will need this to update your state)\n\t\t\t\t>\n\t\t\t\t\t{choices.map(choice => (\n\t\t\t\t\t\t<div key={choice.id}>\n\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tname=\"name\"\n\t\t\t\t\t\t\t\tvalue={choice.name}\n\t\t\t\t\t\t\t\treadOnly={true}\n\t\t\t\t\t\t\t\tdisabled={true}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\ttext={BUTTON_DELETE}\n\t\t\t\t\t\t\t\taction={() => deleteChoice(choice.id)}\n\t\t\t\t\t\t\t\ttheme={ { size: '1rem', color: '#D93829' } }\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t))}\n\t\t\t\t</Reorder>\n\t\t\t) : (\n\t\t\t\t<MessageBox text={'*No choices added'} theme={ { color: '#D67404' } } />\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport default ChoiceGrid;\n","import React, { Fragment } from 'react';\nimport ChoiceAdd from './choiceAdd';\nimport ChoiceGrid from './choiceGrid';\n\nconst Choices = () => (\n\t<Fragment>\n\t\t<ChoiceGrid />\n\t\t<ChoiceAdd />\n\t</Fragment>\n);\n\nexport default Choices;\n","import styled from 'styled-components';\n\nexport const CheckboxWrapper = styled.input`\n    align-self: center;    \n    margin: 0.5rem;\n`;\n","import React from 'react';\nimport { CheckboxWrapper } from './style';\n\nconst Checkbox = ({ checked, handleChange, name }) => (\n\t<CheckboxWrapper\n\t\tid={name}\n\t\tname={name}\n\t\ttype=\"checkbox\"\n\t\tchecked={checked}\n\t\tonChange={handleChange}\n\t/>\n);\n\nexport default Checkbox;\n","import styled from 'styled-components';\n\nexport const SelectWrapper = styled.select`\n    display: block;\n    font-size: 1rem;\n    color: #444;\n    line-height: 1.3;\n    padding: .6em 1.4em .5em .8em;\n    box-sizing: border-box; \n    border: 1px solid #aaa;\n    box-shadow: 0 1px 0 1px rgba(0,0,0,.04);\n    border-radius: .5em;\n    -moz-appearance: none;\n    -webkit-appearance: none;\n    background-color: #fff;\n    margin: 0 0.5em 0.5em 0;\n    `;\n","import React from 'react';\nimport { SelectWrapper } from './style';\n\nconst Select = ({ handleChange, name, options, value }) => (\n\t<SelectWrapper\n\t\tid={name}\n\t\tname={name}\n\t\tvalue={value}\n\t\tonChange={handleChange}\n\t>\n\t\t{options.map(opt => (\n\t\t\t<option key={opt.value} value={opt.value}>{opt.label}</option>\n\t\t))}\n\t</SelectWrapper>\n);\n\nexport default Select;\n","import styled from 'styled-components';\n\nexport const LabelWrapper = styled.label`\n    flex: 1;\n    margin: 1rem 0;\n`;\n","import React from 'react';\nimport { LabelWrapper } from './style';\n\nconst Label = ({ label }) => (\n\t<LabelWrapper>\n\t\t{label}\n\t</LabelWrapper>\n);\n\nexport default Label;\n","import styled from 'styled-components';\n\nexport const FieldBodyWrapper = styled.div`\n\tdisplay: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n`;\n\nexport const FormGroupWrapper = styled.div`\n\tdisplay: flex;\n    // justify-content: flex-start;\n    flex-flow: row wrap;\n    margin-top: 1em;\n    width: 80%;\n    align-items: felx-start;\n\n`;\n\nexport const CheckboxWrapper = styled.input`\n\talign-self: center;\n`;\n","\nimport React, { useContext } from 'react';\nimport { DispatchContext } from '../../../context/fieldContext';\nimport Choices from '../../choices';\nimport Checkbox from '../../../elements/checkbox';\nimport Select from '../../../elements/select';\nimport Label from '../../../elements/label';\nimport Input from '../../../elements/input';\nimport ErrorList from '../../../elements/errorList';\nimport {\n\tFIELD_CHOICES,\n\tFIELD_DEFAULT_VALUE,\n\tFIELD_LABEL,\n\tFIELD_ORDER,\n\tFIELD_REQUIRED,\n\tFIELD_TYPE\n} from '../../../MessageBundle';\nimport { TYPE, OPERATIONS, ORDER } from '../../../Constants';\nimport { FieldBodyWrapper, FormGroupWrapper } from './style';\n\nconst FieldBody = () => {\n\tconst { state, dispatch } = useContext(DispatchContext);\n\n\t// Handling events\n\tconst handleInputChange = event => {\n\t\tconst { name, value } = event.target;\n\n\t\tdispatch({\n\t\t\ttype: OPERATIONS.INPUT_CHANGE,\n\t\t\tpayload: {\n\t\t\t\tname,\n\t\t\t\tvalue\n\t\t\t}\n\t\t});\n\t};\n\n\tconst handleCheckBoxChange = event => {\n\t\tconst { name } = event.target;\n\n\t\tdispatch({\n\t\t\ttype: OPERATIONS.CHECK_BOX_CHANGE,\n\t\t\tpayload: {\n\t\t\t\tname\n\t\t\t}\n\t\t});\n\t};\n\n\treturn (\n\t\t<FieldBodyWrapper>\n\t\t\t<FormGroupWrapper>\n\t\t\t\t<Label label={FIELD_LABEL} />\n\t\t\t\t<Input\n\t\t\t\t\tvalue={state.field.label}\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tname=\"label\"\n\t\t\t\t\thandleChange={handleInputChange}\n\t\t\t\t/>\n\t\t\t</FormGroupWrapper>\n\t\t\t<ErrorList errors={state.error.label} />\n\t\t\t<FormGroupWrapper>\n\t\t\t\t<Label label={FIELD_TYPE} />\n\t\t\t\t<Select\n\t\t\t\t\thandleChange={handleInputChange}\n\t\t\t\t\toptions={TYPE}\n\t\t\t\t\tvalue={state.field.type}\n\t\t\t\t\tname=\"type\"\n\t\t\t\t/>\n\t\t\t\t<Checkbox\n\t\t\t\t\tchecked={state.field.required}\n\t\t\t\t\thandleChange={handleCheckBoxChange}\n\t\t\t\t\tname=\"required\"\n\t\t\t\t/>\n\t\t\t\t<Label label={FIELD_REQUIRED} />\n\t\t\t</FormGroupWrapper>\n\t\t\t<FormGroupWrapper>\n\t\t\t\t<Label label={FIELD_DEFAULT_VALUE} />\n\t\t\t\t<Input\n\t\t\t\t\tvalue={state.field.default}\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tname=\"default\"\n\t\t\t\t\thandleChange={handleInputChange}\n\t\t\t\t/>\n\t\t\t</FormGroupWrapper>\n\t\t\t<ErrorList errors={state.error.default} />\n\t\t\t<FormGroupWrapper>\n\t\t\t\t<Label label={FIELD_CHOICES} />\n\t\t\t\t<Choices />\n\t\t\t</FormGroupWrapper>\n\t\t\t<FormGroupWrapper>\n\t\t\t\t<Label label={FIELD_ORDER} />\n\t\t\t\t<Select\n\t\t\t\t\thandleChange={handleInputChange}\n\t\t\t\t\toptions={ORDER}\n\t\t\t\t\tvalue={state.field.displayOrder}\n\t\t\t\t\tname=\"displayOrder\"\n\t\t\t\t/>\n\t\t\t</FormGroupWrapper>\n\t\t</FieldBodyWrapper>\n\t);\n};\n\nexport default FieldBody;\n","const FieldService = {\n\t/**\n   * Returns field object\n   */\n\tgetField () {\n\t\treturn {\n\t\t\tlabel: 'Sales region',\n\t\t\trequired: false,\n\t\t\tchoices: [\n\t\t\t\t'Asia',\n\t\t\t\t'Australia',\n\t\t\t\t'Western Europe',\n\t\t\t\t'North America',\n\t\t\t\t'Eastern Europe',\n\t\t\t\t'Latin America',\n\t\t\t\t'Middle East and Africa'\n\t\t\t],\n\t\t\ttype: 'multiSelect',\n\t\t\tdisplayOrder: 'alphabetical',\n\t\t\tdefault: 'North America'\n\t\t};\n\t},\n\t/**\n   * Returns response from the server after making a POST call\n   *\n   * @param url the url to send the request.\n   * @param fieldJson the field object that needs to be saved.\n   */\n\tsaveField (url, fieldJson) {\n\t\treturn fetch(url, {\n\t\t\tmethod: 'POST',\n\t\t\tbody: JSON.stringify(fieldJson),\n\t\t\theaders: {\n\t\t\t\t'Accept': 'application/json',\n\t\t\t\t'Content-Type': 'application/json'\n\t\t\t}\n\t\t});\n\t}\n};\n\nexport default FieldService;\n","import styled from 'styled-components';\n\nexport const FieldFooterButtonWrapper = styled.div`\n\tdisplay: flex;\n    flex-direction: row;\n    justify-content: center;\n    padding: 1rem;\n    height: 70px;\n    align-items: center;\n`;\n\nexport const FieldFooterMessageWrapper = styled.div`\n\tdisplay: flex;\n    flex-direction: row;\n    justify-content: center;\n    padding-bottom: 1.5rem;\n    align-items: center;\n`;\n\nexport const FieldFooterWrapper = styled.div`\n\tdisplay: flex;\n    flex-direction: column;\n    justify-content: center;\n`;\n","import React, { useContext } from 'react';\nimport Button from '../../../elements/button';\nimport MessageBox from '../../../elements/messageBox';\nimport { MOCK_URL, OPERATIONS, MAX_CHOICES } from '../../../Constants';\nimport { DispatchContext } from '../../../context/fieldContext';\nimport FieldService from '../../../services/mockService';\nimport {\n\tBUTTON_SAVE,\n\tBUTTON_CLEAR,\n\tFIELD_SAVE_ERROR,\n\tSAVE_FAILED,\n\tSAVE_SUCCESSFUL,\n\tREQUIRED_FIELD,\n\tREACHED_MAX_LIMIT_FOR_CHOICES\n} from '../../../MessageBundle';\nimport {\n\tFieldFooterWrapper, FieldFooterButtonWrapper, FieldFooterMessageWrapper\n} from './style';\nimport ValidationUtil from '../../../helper/validation';\n\nconst FieldFooter = () => {\n\tconst { state, dispatch } = useContext(DispatchContext);\n\n\tconst handleFormSubmit = async event => {\n\t\tevent.preventDefault();\n\n\t\tconst errors = validateInputFields(state);\n\t\t// const defaultValue = state.field.default;\n\n\t\tif (errors.label.length > 0 || errors.default.length > 0) {\n\t\t\tdispatch({\n\t\t\t\ttype: OPERATIONS.SUBMIT_ERROR,\n\t\t\t\terrorMessage: FIELD_SAVE_ERROR\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\tconsole.log('Logging POST data', state.field);\n\n\t\t// if (defaultValue) {\n\t\t// \tdispatch({\n\t\t// \t\ttype: OPERATIONS.ADD_CHOICE,\n\t\t// \t\tpayload: {\n\t\t// \t\t\tdefault: defaultValue\n\t\t// \t\t}\n\t\t// \t});\n\t\t// }\n\t\tdispatch({ type: OPERATIONS.SUBMIT_STARTED });\n\n\t\ttry {\n\t\t\tconst responseJson = await FieldService.saveField(\n\t\t\t\tMOCK_URL,\n\t\t\t\tstate.field\n\t\t\t).then(resp => resp.json());\n\n\t\t\tdispatch({ type: OPERATIONS.SUBMIT_COMPLETE, response: responseJson });\n\t\t} catch (error) {\n\t\t\tdispatch({\n\t\t\t\ttype: OPERATIONS.SUBMIT_ERROR,\n\t\t\t\terrorMessage: FIELD_SAVE_ERROR\n\t\t\t});\n\t\t}\n\t};\n\n\tconst validateInputFields = state => {\n\t\tconst errors = {};\n\t\tconst defaultValue = state.field.default;\n\n\t\t// Checking for label field\n\t\terrors['label'] = [];\n\t\tif (ValidationUtil.isFieldEmpty(state.field.label)) {\n\t\t\terrors['label'].push(REQUIRED_FIELD);\n\t\t}\n\n\t\t// Checking for default field\n\t\terrors['default'] = [];\n\t\tif (defaultValue\n\t\t\t&& !state.field.choices.some(choice => choice.name === defaultValue)\n\t\t\t&& ValidationUtil.hasReachedMaxLimit(state.field.choices, MAX_CHOICES)) {\n\t\t\terrors['default'].push(REACHED_MAX_LIMIT_FOR_CHOICES(MAX_CHOICES));\n\t\t}\n\n\t\tdispatch({\n\t\t\ttype: OPERATIONS.SET_ERROR,\n\t\t\tpayload: {\n\t\t\t\terrors\n\t\t\t}\n\t\t});\n\n\t\treturn errors;\n\t};\n\n\tconst handleClearForm = event => {\n\t\tevent.preventDefault();\n\t\tdispatch({ type: OPERATIONS.CLEAR });\n\t};\n\n\treturn (\n\t\t<FieldFooterWrapper>\n\t\t\t<FieldFooterButtonWrapper>\n\t\t\t\t<Button text={BUTTON_SAVE} action={handleFormSubmit} theme={ { size: '1.5rem', color: '#1B8728' } } />\n\t\t\t\t{/* <Button text={BUTTON_CANCEL} action={handleCancelForm} /> */}\n\t\t\t\t<Button text={BUTTON_CLEAR} action={handleClearForm} theme={ { size: '1.5rem', color: '#D93829' } } />\n\t\t\t</FieldFooterButtonWrapper>\n\t\t\t<FieldFooterMessageWrapper>\n\t\t\t\t{state.submit.submitted\n\t\t\t\t\t&& <MessageBox text={SAVE_SUCCESSFUL} theme={ { color: '#1B8728' } } />}\n\t\t\t\t{state.submit.errorMessage\n\t\t\t\t\t&& <MessageBox text={SAVE_FAILED} theme={ { size: '1.5rem', color: '#D93829' } } />}\n\t\t\t</FieldFooterMessageWrapper>\n\t\t</FieldFooterWrapper>\n\t);\n};\n\nexport default FieldFooter;\n","import styled from 'styled-components';\n\nexport const TitleWrapper = styled.div`\n\tfont-size: 1.5rem;\n    font-weight: bold;\n    color: ${props => (props.theme.color ? props.theme.color : '#1B8728')};\n    border: ${props =>\n\t\tprops.theme.color ? `2px solid ${props.theme.color}` : '2px solid #73E3FF'};\n    background-color: ${props => (props.theme.backgroundColor ? props.theme.backgroundColor : 'palevioletred')};\n    padding: 0.5em;\n`;\n","import React from 'react';\nimport { TitleWrapper } from './style';\n\nconst Title = ({ text, theme }) => (\n\t<TitleWrapper theme={theme}>\n\t\t<div>{text}</div>\n\t</TitleWrapper>\n);\n\nexport default Title;\n","import styled from 'styled-components';\n\nexport const FieldWrapper = styled.div`\n\tbackground-color: rgb(241, 245, 249);\n    border-radius: 5px;\n\tbackground: #fff;\n\tmax-width: 640px;\n\tmin-height: 700px;\n\tmargin: 1em auto;\n\tborder: 1px solid #DFEAF3\n`;\n","import React from 'react';\nimport FieldBody from './fieldBody';\nimport FieldFooter from './fieldFooter';\nimport Title from '../../elements/title';\nimport { FIELD_TITLE } from '../../MessageBundle'; // Get strings from message bundle\nimport {\n\tFieldWrapper\n} from './style';\n\nconst Field = () => (\n\t<FieldWrapper>\n\t\t<Title text={FIELD_TITLE} theme={ { color: '#45687F', backgroundColor: '#DCEDF5' } }/>\n\t\t<FieldBody />\n\t\t<FieldFooter />\n\t</FieldWrapper>\n);\n\nexport default Field;\n","import React from 'react';\nimport Field from './components/field';\nimport { DispatchProvider } from './context/fieldContext';\n/**\n * Main application\n */\nfunction App () {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<DispatchProvider>\n\t\t\t\t<Field />\n\t\t\t</DispatchProvider>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n    \t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n/* eslint-disable */\nexport function register (config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW (swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then(registration => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl)\n\t\t.then(response => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\n\t\t\tif (\n\t\t\t\tresponse.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t'No internet connection found. App is running in offline mode.'\n\t\t\t);\n\t\t});\n}\n\nexport function unregister () {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\tregistration.unregister();\n\t\t});\n\t}\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}